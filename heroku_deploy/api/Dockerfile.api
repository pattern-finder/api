
# PRODUCTION DOCKERFILE
# ---------------------
# This Dockerfile allows to build a Docker image of the NestJS application
# and based on a NodeJS 14 image. The multi-stage mechanism allows to build
# the application in a "builder" stage and then create a lightweight production
# image containing the required dependencies and the JS build files.
# 
# Dockerfile best practices
# https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
# Dockerized NodeJS best practices
# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md
# https://www.bretfisher.com/node-docker-good-defaults/
# http://goldbergyoni.com/checklist-best-practice-of-node-js-in-production/

FROM node:14-alpine as builder

ENV NODE_ENV build

# USER node
WORKDIR /usr/src/app

COPY . /usr/src/app/

RUN npm ci \
    npm run prebuild \
    && npm run build

# ---

FROM node:14-alpine

ENV NODE_ENV production

# USER node
WORKDIR /usr/src/app

COPY --from=builder /usr/src/app/package*.json /usr/src/app/
COPY --from=builder /usr/src/app/dist/ /usr/src/app/

RUN sudo apt-get update -y
RUN sudo apt-get install -y python

ENV LIBS_DIR=/usr/src/app/
ENV ALGO_DIR=/usr/src/app/evaluation_code

COPY ./libs ${LIBS_DIR}
COPY ./evaluation_code ${ALGO_DIR}

COPY ./conf /usr/src/app/conf


RUN npm ci

RUN npm i yargs

CMD ["node", "main"]
